// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  email       String            @unique
  username    String
  password    String
  role        UserRole[]
  internalSec UserInternalSec[]
  author      AuthorTicket[]
  assign      AssignTicket?
  designate   DesignateTicket?
}

model Role {
  id         Int              @id @default(autoincrement())
  name       String
  user       UserRole[]
  permission RolePermission[]
}

model Permission {
  id   Int              @id @default(autoincrement())
  name String
  role RolePermission[]
}

model Dependency {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  Tickets     Ticket[]
  internalSec InternalSec[]
}

model InternalSec {
  id           Int               @id @default(autoincrement())
  name         String
  dependency   Dependency        @relation(fields: [dependencyId], references: [id])
  dependencyId Int
  users        UserInternalSec[]
  service      Service[]
  tickets      Ticket[]
}

model Service {
  id            Int         @id @default(autoincrement())
  name          String
  internalSec   InternalSec @relation(fields: [internalSecId], references: [id])
  internalSecId Int
  tickets       Ticket[]
}

model Ticket {
  id                Int              @id @default(autoincrement())
  title             String           @db.VarChar(255)
  description       String?
  status            String           @default("open")
  priority          String           @default("low")
  authorTicket      AuthorTicket[]
  assignTicket      AssignTicket?
  designateTicket   DesignateTicket?
  dependencyDest    Dependency       @relation(fields: [dependencyDestId], references: [id])
  dependencyDestId  Int
  internalSecDest   InternalSec      @relation(fields: [internalSecDestId], references: [id])
  internalSecDestId Int
  serviceProvided   Service          @relation(fields: [serviceProvidedId], references: [id])
  serviceProvidedId Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

model UserInternalSec {
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  internalSec   InternalSec @relation(fields: [internalSecId], references: [id])
  internalSecId Int

  @@id([userId, internalSecId])
}

model AuthorTicket {
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId Int

  @@id([authorId, ticketId])
}

model AssignTicket {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId Int    @unique

  @@id([userId, ticketId])
}

model DesignateTicket {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId Int    @unique

  @@id([userId, ticketId])
}
